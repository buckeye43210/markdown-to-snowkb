---
title: Documentation Should Be A Team Sport
subtitle: Creating Collaborative Technical Documentation
author: Rick Holbert
date: 13 August 2025
theme: PaloAlto
colortheme: whale
fonttheme: professionalfonts
---

## Why Documentation Matters
- Backbone of project success.
- Enables knowledge sharing, onboarding, maintenance.
- Poor documentation causes confusion, inefficiency.
- Team collaboration ensures accuracy, relevance.

---

## The Team Sport Mindset
- Everyone contributes: developers, writers, users.
- Collaborative tools streamline workflows.
- Version control and automation boost efficiency.
- Goal: Living, maintainable documentation.

---

## Workflow Overview
- **Tools**: VS Code, Markdown, Mermaid, Pandoc, GitHub, Jenkins.
- **Steps**: Write, preview, collaborate, convert, publish.
- Focus: Simplicity, integration, longevity.

---

## Benefits of Markdown
- **Longevity**: Lightweight, durable
  - AT&T’s roff, 1970s, readable
  - LaTeX, 1984, still widely used
  - SGML, 1986, DocBook, etc.
  - Postscript, 1982, graphics, printers, etc.
- **LLM Integration**: AI-assisted editing (e.g., LLM suggestions).
- **GitHub Rendering**: Native Markdown/Mermaid support.
- **Fewer Distractions**: Focus on pure essence of document.
- Structured, portable, future-proof.
- Word processors fade; Markdown endures.

---

## Markdown Benefits Workflow
```mermaid
graph TD
    A[AT&T: roff for Patents] -->|Historical Roots| B[Long-Term Readability]
    C[LLM: Generate Markdown] -->|AI Assistance| D[AI-Enhanced Editing]
    E[GitHub: Render Markdown] -->|Team Workflow| F[Collaborative Review]
    B --> G[Modern Markdown Use]
    D --> G
    F --> G
    G -->|Iterative Updates| H[Publish Early, Publish Often]
    style A fill:#4682B4,stroke:#2E8B57,stroke-width:2px,color:#FFFFFF
    style B fill:#ADD8E6,stroke:#2E8B57,stroke-width:2px
    style C fill:#4682B4,stroke:#2E8B57,stroke-width:2px,color:#FFFFFF
    style D fill:#ADD8E6,stroke:#2E8B57,stroke-width:2px
    style E fill:#4682B4,stroke:#2E8B57,stroke-width:2px,color:#FFFFFF
    style F fill:#ADD8E6,stroke:#2E8B57,stroke-width:2px
    style G fill:#2E8B57,stroke:#4682B4,stroke-width:2px,color:#FFFFFF
    style H fill:#20B2AA,stroke:#4682B4,stroke-width:2px,color:#FFFFFF
    style G-->H stroke:#20B2AA,stroke-width:4px
```

---

## Step 1: Write in VS Code
- Use VS Code with Markdown Preview Mermaid Support.
- Write Markdown for simplicity.
- Add Mermaid diagrams for workflows.
- Preview diagrams in real-time.
```mermaid
graph LR
    A[Write Markdown] --> B[Add Mermaid Diagrams]
    B --> C[Preview in VS Code]
    C --> D[Commit to GitHub]
    style A fill:#4682B4,stroke:#2E8B57,stroke-width:2px,color:#FFFFFF
    style B fill:#ADD8E6,stroke:#2E8B57,stroke-width:2px
    style C fill:#20B2AA,stroke:#4682B4,stroke-width:2px,color:#FFFFFF
    style D fill:#ADD8E6,stroke:#2E8B57,stroke-width:2px
```

---

## Step 2: Pandoc Conversion Tool
- Converts Markdown to HTML, Beamer PDF, EPUB.
- Uses `mermaid-filter` for diagram rendering.
- Diagram size: `mermaid-filter.json` (width: 300) or Beamer template (scale=0.5).
- Set Beamer themes via YAML (`PaloAlto + whale`).
- Command:
  ```bash
  pandoc -F mermaid-filter --metadata=mermaid-filter.config=mermaid-filter.json -t beamer -V theme=PaloAlto -V colortheme=whale -V fonttheme=professionalfonts --template=beamer-template.tex presentation.md -o presentation.pdf --pdf-engine=pdflatex
  ```

---

## Step 3: Style with CSS
- Create .docx with styles (fonts, colors).
- Convert to HTML via Save As or tools like [WordToHTML.net](https://wordtohtml.net/) or `python-docx`.
- Extract CSS from HTML style section.
- Apply to HTML: `pandoc --css=styles.css`.
- Example: Headings, font sizes, colors.

---

## Step 4: GitHub Collaboration
- Host Markdown in GitHub repository.
- Use pull requests for reviews, edits.
- Track changes, maintain history.
- Native Markdown/Mermaid rendering.
```mermaid
graph LR
    A[Edit Markdown] --> B[Push to Branch]
    B --> C[Create Pull Request]
    C --> D[Team Review]
    D --> E{Approved?}
    E -->|Yes| F[Merge to Main]
    E -->|No| A
    F --> G[Publish]
    style A fill:#4682B4,stroke:#2E8B57,stroke-width:2px,color:#FFFFFF
    style B fill:#ADD8E6,stroke:#2E8B57,stroke-width:2px
    style C fill:#ADD8E6,stroke:#2E8B57,stroke-width:2px
    style D fill:#ADD8E6,stroke:#2E8B57,stroke-width:2px
    style E fill:#20B2AA,stroke:#4682B4,stroke-width:2px,color:#FFFFFF
    style F fill:#2E8B57,stroke:#4682B4,stroke-width:2px,color:#FFFFFF
    style G fill:#ADD8E6,stroke:#2E8B57,stroke-width:2px
```

---

## Step 5: Publish to ServiceNow KB
- **Manual**: Paste HTML into ServiceNow KB editor, update, preview, upload images, submit.
- **Automatic (Jenkins CI/CD)**:
  - Pipeline: Checkout repo, run `make html`, POST JSON to ServiceNow API (/api/now/table/kb_knowledge).
  - Body example: {"short_description": "Documentation Update", "text": "HTML content", "kb_knowledge_base": "sys_id", "workflow_state": "published"}.
  - Store credentials in Jenkins Credentials Plugin (ID: `servicenow-api-credentials`).
  - Stages: Checkout, Build, Publish (see `Jenkinsfile`).
- **Alternative**: GitHub Actions (workflow YAML for `make html`, API POST) -- not currently enabled.
```mermaid
sequenceDiagram
    participant J as Jenkins
    participant C as Jenkins Credentials
    participant S as ServiceNow API
    activate J
    J->>C: Fetch Credentials
    Note left of J: Uses Jenkins Credentials Plugin
    C-->>J: Return Credentials
    J->J: Run `make html`
    Note over J: Converts Markdown to HTML
    J->>S: POST JSON Payload
    Note over J,S: {"short_description": "Documentation Update",<br>"text": "HTML content",<br>"kb_knowledge_base": "sys_id",<br>"workflow_state": "published"}
    S-->>J: Confirm Publication
    deactivate J
```

---

## Step 6: Automate with Makefile
- Automates conversions, Git operations.
- Tasks: Beamer PDF (themes, scaled diagrams), HTML, EPUB; push; clean.
- Commands: `make all`, `make pdf`, `make html`, `make epub`, `make push`, `make clean`.
```makefile
.PHONY: all pdf epub html push clean check-mermaid

all: pdf html epub

check-mermaid:
	@command -v pandoc-mermaid-filter >/dev/null || { echo "Error: mermaid-filter not installed. Run 'npm i -g mermaid-filter'"; exit 1; }
	@command -v mmdc >/dev/null || { echo "Error: mermaid-cli not installed. Run 'npm i -g @mermaid-js/mermaid-cli'"; exit 1; }

pdf: check-mermaid
	pandoc -F mermaid-filter --metadata=mermaid-filter.config=mermaid-filter.json -t beamer -V theme=PaloAlto -V colortheme=whale -V fonttheme=professionalfonts --template=beamer-template.tex presentation.md -o presentation.pdf --pdf-engine=pdflatex

html: check-mermaid
	pandoc -F mermaid-filter --standalone --css=styles.css presentation.md -o presentation.html

epub: check-mermaid
	mmdc -i presentation.md -o temp.md --config mermaid-filter.json
	pandoc temp.md -o presentation.epub
	rm temp.md

push:
	git add . && git commit -m "Update docs" && git push

clean:
	rm -f presentation.pdf presentation.html presentation.epub temp.md
```

---

## Next Steps
- **Proof of Concept**: Automate ServiceNow publishing with Jenkins (see `Jenkinsfile`).
- **GitHub Actions**: Request enablement for simpler CI/CD.
- **Expand LLM Use**:
  - AI auto-generated drafts.
  - Documentation taxonomy.
- **Enhanced Indexing**:
  - Permanent Decision Tree Builder and FreePlane.
  - Categorize by topic, project, etc.
  - Result: ServiceNow KB Mind Map Search Tree.

---

## Conclusion
- Collaborative documentation drives success.
- Markdown ensures longevity, LLM integration.
- VS Code, Pandoc, GitHub, Jenkins streamline workflows.
- Mermaid diagrams and Beamer themes enhance clarity.
- Let’s make documentation a team sport!
